{"version":3,"file":"static/js/660.94539926.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","components/Form/Form.jsx","pages/Movies/Movies.jsx","services/tmbdApi.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport noImage from '../../images/noImage.png';\n\nexport const List = styled.ul`\n  list-style-type: none;\n`;\n\nexport const Item = styled.li`\n  font-weight: 600;\n  font-size: 18px;\n  margin-bottom: 10px;\n\n  &:hover {\n    color: #c79b5d;\n  }\n`;\n\nexport const MovieLink = styled(Link)`\n  &:hover::after,\n  &:focus::after {\n    content: '';\n    background-image: ${props =>\n      props.cover\n        ? `url('https://image.tmdb.org/t/p/w500/${props.cover}')`\n        : `url(${noImage})`};\n\n    background-size: cover;\n    width: 400px;\n    height: 560px;\n    display: block;\n    border-radius: 4px;\n    border: 1px solid rgba(199, 155, 93);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n    position: absolute;\n    top: 20%;\n    left: 50%;\n    z-index: 1;\n    color: #c79b5d;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport { List, Item, MovieLink } from './MovieList.styled';\n\nconst MovieList = ({ films }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {films.map(film => (\n        <Item key={film.id}>\n          <MovieLink\n            to={`/movies/${film.id}`}\n            state={{ from: location }}\n            cover={film.poster_path}\n          >\n            {film.title}\n          </MovieLink>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nexport default MovieList;\n","import { useState } from 'react';\n\nconst Form = ({ searchMovies }) => {\n  const [query, setQuery] = useState('');\n\n  const handleInputChange = event => {\n    setQuery(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    searchMovies(query.toLowerCase());\n  };\n\n  return (\n    <form className=\"pb-4 flex justify-center\" onSubmit={handleSubmit}>\n      <input\n        className=\"mr-2 min-w-0 rounded-md border-2 border-[#64748b] bg-[#6e7376]/5 px-3.5 py-2 text-[#000000] shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-yellow-500 sm:text-sm sm:leading-6\"\n        type=\"text\"\n        name=\"query\"\n        autoFocus\n        value={query}\n        onChange={handleInputChange}\n        placeholder=\"Enter Movie\"\n      />\n      <button\n        className=\"flex-none rounded-md bg-yellow-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-yellow-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-yellow-500\"\n        type=\"submit\"\n      >\n        Search\n      </button>\n    </form>\n  );\n};\n\nexport default Form;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport Loader from 'components/Loader/Loader';\nimport EditorList from 'components/MovieList/MovieList';\nimport Form from 'components/Form/Form';\nimport { fetchSearchByKeyword } from 'services/tmbdApi';\n\nconst Movies = () => {\n  const [searchFilms, setSearchFilms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searched, setSearched] = useState(false);\n  const movieName = searchParams.get('query') || '';\n\n  const updateQueryString = query => {\n    const nextParams = query !== '' && { query };\n    setSearchParams(nextParams);\n  };\n\n  useEffect(() => {\n    const search = async () => {\n      try {\n        setLoading(true);\n        const movies = await fetchSearchByKeyword(movieName);\n        setSearchFilms(movies);\n        setSearched(true);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (movieName !== '') {\n      search();\n    } else {\n      setSearchFilms([]);\n      setSearched(false);\n    }\n  }, [movieName]);\n\n  return (\n    <div className=\"flex justify-center\">\n      <main>\n        <Form searchMovies={updateQueryString} />\n        {loading && <Loader />}\n        {searched && searchFilms.length === 0 && (\n          <p>There are no movies with this request. Please, try again...</p>\n        )}\n        {searchFilms.length > 0 && <EditorList films={searchFilms} />}\n      </main>\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '3d7efa62fc27fcb6f07d7d25afd35619';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\nexport const fetchSearchByKeyword = async keyword => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["List","styled","ul","_templateObject","_taggedTemplateLiteral","Item","li","_templateObject2","MovieLink","Link","_templateObject3","props","cover","concat","noImage","_ref","films","location","useLocation","_jsx","children","map","film","to","id","state","from","poster_path","title","searchMovies","query","setQuery","useState","_jsxs","className","onSubmit","event","preventDefault","toLowerCase","type","name","autoFocus","value","onChange","target","placeholder","Movies","searchFilms","setSearchFilms","loading","setLoading","searchParams","setSearchParams","useSearchParams","searched","setSearched","movieName","get","useEffect","async","movies","fetchSearchByKeyword","error","console","search","Form","Loader","length","EditorList","axios","defaults","baseURL","API_KEY","fetchTrending","data","results","keyword","fetchMovieDetails","movieId","fetchActors","cast","fetchReviews"],"sourceRoot":""}